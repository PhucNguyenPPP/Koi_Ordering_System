// <auto-generated />
using System;
using DAL.Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DAL.Migrations
{
    [DbContext(typeof(KoiDbContext))]
    partial class KoiDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.20")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DAL.Entities.Airport", b =>
                {
                    b.Property<Guid>("AirportId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("AirportName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("AirportId");

                    b.ToTable("Airports");

                    b.HasData(
                        new
                        {
                            AirportId = new Guid("9c26a8b1-ddf5-4f74-8088-d1ff471a0526"),
                            Address = "12333",
                            AirportName = "Tokyo International Airport"
                        },
                        new
                        {
                            AirportId = new Guid("626db7e0-1198-49f1-af5c-fa8d24f1ce19"),
                            Address = "!233123132",
                            AirportName = "Los Angeles International Airport"
                        });
                });

            modelBuilder.Entity("DAL.Entities.Breed", b =>
                {
                    b.Property<Guid>("BreedId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("BreedId");

                    b.ToTable("Breeds");

                    b.HasData(
                        new
                        {
                            BreedId = new Guid("fbd7ed77-3298-4316-ad38-c37a7978c3ed"),
                            Name = "Kohaku"
                        },
                        new
                        {
                            BreedId = new Guid("c4eb5367-8656-4f29-b67f-c45763c8e987"),
                            Name = "Sanke"
                        });
                });

            modelBuilder.Entity("DAL.Entities.Cart", b =>
                {
                    b.Property<Guid>("CartId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CartId");

                    b.HasIndex("UserId");

                    b.ToTable("Carts");

                    b.HasData(
                        new
                        {
                            CartId = new Guid("20c2c145-a01b-4bc7-b817-8946b94f2037"),
                            CreatedDate = new DateTime(2024, 10, 6, 18, 42, 27, 305, DateTimeKind.Local).AddTicks(7010),
                            UserId = new Guid("b886a834-419a-4a44-8823-a9c4d96c3b2c")
                        });
                });

            modelBuilder.Entity("DAL.Entities.CartItem", b =>
                {
                    b.Property<Guid>("CartItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CartId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("KoiId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("CartItemId");

                    b.HasIndex("CartId");

                    b.HasIndex("KoiId");

                    b.ToTable("CartItems");

                    b.HasData(
                        new
                        {
                            CartItemId = new Guid("e1c9089f-74da-4123-9732-15eb81d78f49"),
                            CartId = new Guid("20c2c145-a01b-4bc7-b817-8946b94f2037"),
                            KoiId = new Guid("643bd313-2e49-4a14-8ae5-a252136e0f5c"),
                            Quantity = 1,
                            UnitPrice = 5000m
                        });
                });

            modelBuilder.Entity("DAL.Entities.Flight", b =>
                {
                    b.Property<Guid>("FlightId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ArrivalAirportId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid>("DepartureAirportId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("FlightId");

                    b.HasIndex("ArrivalAirportId");

                    b.HasIndex("DepartureAirportId");

                    b.ToTable("Flights");

                    b.HasData(
                        new
                        {
                            FlightId = new Guid("50589e90-8f54-48e9-80b3-0c4e2da5c539"),
                            ArrivalAirportId = new Guid("626db7e0-1198-49f1-af5c-fa8d24f1ce19"),
                            Code = "FL123",
                            DepartureAirportId = new Guid("9c26a8b1-ddf5-4f74-8088-d1ff471a0526"),
                            Status = "On Time"
                        });
                });

            modelBuilder.Entity("DAL.Entities.Koi", b =>
                {
                    b.Property<Guid>("KoiId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AvatarLink")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("CertificationLink")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Description")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("Dob")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("FarmId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid?>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18, 0)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("KoiId");

                    b.HasIndex("FarmId");

                    b.HasIndex("OrderId");

                    b.ToTable("Kois");

                    b.HasData(
                        new
                        {
                            KoiId = new Guid("643bd313-2e49-4a14-8ae5-a252136e0f5c"),
                            AvatarLink = "avatar_link_1",
                            CertificationLink = "certification_link_1",
                            Dob = new DateTime(2023, 10, 6, 18, 42, 27, 302, DateTimeKind.Local).AddTicks(6571),
                            FarmId = new Guid("ede8cb4f-ec5f-4de2-a1f2-fec6f1596d9e"),
                            Gender = "Male",
                            Name = "Koi A",
                            Price = 5000m,
                            Status = false
                        });
                });

            modelBuilder.Entity("DAL.Entities.KoiBreed", b =>
                {
                    b.Property<Guid>("KoiBreedId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BreedId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("KoiId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("KoiBreedId");

                    b.HasIndex("BreedId");

                    b.HasIndex("KoiId");

                    b.ToTable("KoiBreeds");
                });

            modelBuilder.Entity("DAL.Entities.KoiFarm", b =>
                {
                    b.Property<Guid>("KoiFarmId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FarmAddress")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("FarmAvatar")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FarmDescription")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FarmName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid>("KoiFarmManagerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("StorageProvinceId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("KoiFarmId");

                    b.HasIndex("KoiFarmManagerId")
                        .IsUnique();

                    b.HasIndex("StorageProvinceId");

                    b.ToTable("KoiFarms");

                    b.HasData(
                        new
                        {
                            KoiFarmId = new Guid("ede8cb4f-ec5f-4de2-a1f2-fec6f1596d9e"),
                            FarmAddress = "123 Farm Rd",
                            FarmAvatar = "farm_avatar_link",
                            FarmDescription = "High-quality Koi farm",
                            FarmName = "Koi Farm 1",
                            KoiFarmManagerId = new Guid("b886a834-419a-4a44-8823-a9c4d96c3b2c")
                        });
                });

            modelBuilder.Entity("DAL.Entities.KoiImage", b =>
                {
                    b.Property<Guid>("KoiImageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("KoiId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Link")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("KoiImageId");

                    b.HasIndex("KoiId");

                    b.ToTable("KoiImages");
                });

            modelBuilder.Entity("DAL.Entities.Order", b =>
                {
                    b.Property<Guid>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Feedback")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("FlightId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("Height")
                        .HasColumnType("int");

                    b.Property<int?>("Length")
                        .HasColumnType("int");

                    b.Property<string>("OrderNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("PolicyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("Rating")
                        .HasColumnType("int");

                    b.Property<string>("ShippingFee")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18, 0)");

                    b.Property<int?>("Weight")
                        .HasColumnType("int");

                    b.Property<int?>("Width")
                        .HasColumnType("int");

                    b.HasKey("OrderId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("FlightId");

                    b.HasIndex("PolicyId");

                    b.ToTable("Orders");

                    b.HasData(
                        new
                        {
                            OrderId = new Guid("bf2fb33a-0500-4ef6-bcc6-abe4b819fa4d"),
                            Address = "123 Main St",
                            CreatedDate = new DateTime(2024, 10, 6, 18, 42, 27, 302, DateTimeKind.Local).AddTicks(8851),
                            CustomerId = new Guid("b886a834-419a-4a44-8823-a9c4d96c3b2c"),
                            OrderNumber = "ORD123",
                            Phone = "1234567890",
                            PolicyId = new Guid("f9af0623-78bd-4775-a0fa-1b827b5167a1"),
                            ShippingFee = "1111",
                            Status = "Processing",
                            TotalPrice = 10000m
                        });
                });

            modelBuilder.Entity("DAL.Entities.OrderStorage", b =>
                {
                    b.Property<Guid>("OrderStorageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ArrivalTime")
                        .HasColumnType("datetime");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ShipperId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<Guid>("StorageProvinceId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("OrderStorageId");

                    b.HasIndex("OrderId");

                    b.HasIndex("ShipperId");

                    b.HasIndex("StorageProvinceId");

                    b.ToTable("OrderStorages");

                    b.HasData(
                        new
                        {
                            OrderStorageId = new Guid("3cb4e0fc-c0ac-4c19-afcf-4ecc5e2a384a"),
                            ArrivalTime = new DateTime(2024, 10, 6, 18, 42, 27, 302, DateTimeKind.Local).AddTicks(9192),
                            OrderId = new Guid("bf2fb33a-0500-4ef6-bcc6-abe4b819fa4d"),
                            ShipperId = new Guid("b886a834-419a-4a44-8823-a9c4d96c3b2c"),
                            Status = false,
                            StorageProvinceId = new Guid("b4822413-a428-4c09-ae55-b2920892ce6e")
                        });
                });

            modelBuilder.Entity("DAL.Entities.Policy", b =>
                {
                    b.Property<Guid>("PolicyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("FarmId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("PercentageRefund")
                        .HasColumnType("int");

                    b.Property<string>("PolicyName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("PolicyId");

                    b.HasIndex("FarmId");

                    b.ToTable("Policies");

                    b.HasData(
                        new
                        {
                            PolicyId = new Guid("f9af0623-78bd-4775-a0fa-1b827b5167a1"),
                            Description = "Refund Policy",
                            FarmId = new Guid("ede8cb4f-ec5f-4de2-a1f2-fec6f1596d9e"),
                            PercentageRefund = 0,
                            PolicyName = "Refund Policy"
                        });
                });

            modelBuilder.Entity("DAL.Entities.RefreshToken", b =>
                {
                    b.Property<Guid>("RefreshTokenId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ExpiredAt")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsValid")
                        .HasColumnType("bit");

                    b.Property<string>("JwtId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RefreshToken1")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("RefreshTokenId");

                    b.HasIndex("UserId");

                    b.ToTable("RefreshTokens");

                    b.HasData(
                        new
                        {
                            RefreshTokenId = new Guid("a058bf84-a6ba-4fd5-9e0e-64d1fcf9fd8b"),
                            ExpiredAt = new DateTime(2024, 11, 5, 18, 42, 27, 302, DateTimeKind.Local).AddTicks(9813),
                            IsValid = false,
                            JwtId = "abcd1234",
                            RefreshToken1 = "abcd1234",
                            UserId = new Guid("b886a834-419a-4a44-8823-a9c4d96c3b2c")
                        });
                });

            modelBuilder.Entity("DAL.Entities.RefundRequest", b =>
                {
                    b.Property<Guid>("RefundRequestId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Response")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("RefundRequestId");

                    b.HasIndex("OrderId");

                    b.ToTable("RefundRequests");

                    b.HasData(
                        new
                        {
                            RefundRequestId = new Guid("caaa8099-de72-4d02-b079-116cae4b49e8"),
                            CreatedDate = new DateTime(2024, 10, 6, 18, 42, 27, 303, DateTimeKind.Local).AddTicks(211),
                            Description = "Pending",
                            OrderId = new Guid("bf2fb33a-0500-4ef6-bcc6-abe4b819fa4d"),
                            Response = "Pending",
                            Status = "Pending"
                        });
                });

            modelBuilder.Entity("DAL.Entities.RefundRequestMedium", b =>
                {
                    b.Property<Guid>("RefundRequestMediaId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Link")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RefundRequestId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("RefundRequestMediaId");

                    b.HasIndex("RefundRequestId");

                    b.ToTable("RefundRequestMedia");

                    b.HasData(
                        new
                        {
                            RefundRequestMediaId = new Guid("e124dcf5-5098-46b9-83b3-751236dec2d5"),
                            Link = "Pending",
                            RefundRequestId = new Guid("caaa8099-de72-4d02-b079-116cae4b49e8")
                        });
                });

            modelBuilder.Entity("DAL.Entities.Role", b =>
                {
                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("RoleId");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            RoleId = new Guid("07d78700-442e-4a96-8335-4eb17b7b919b"),
                            RoleName = "Admin"
                        },
                        new
                        {
                            RoleId = new Guid("9cf7e90a-d8c1-482c-a44e-5df7450f7290"),
                            RoleName = "User"
                        });
                });

            modelBuilder.Entity("DAL.Entities.ShippingFee", b =>
                {
                    b.Property<Guid>("ShippingFeeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18, 0)");

                    b.Property<Guid>("StorageProvinceJpId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("StorageProvinceVnId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ShippingFeeId");

                    b.HasIndex("StorageProvinceJpId");

                    b.HasIndex("StorageProvinceVnId");

                    b.ToTable("ShippingFees");
                });

            modelBuilder.Entity("DAL.Entities.StorageProvince", b =>
                {
                    b.Property<Guid>("StorageProvinceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("AirportId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ProvinceName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<string>("StorageName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("StorageProvinceId");

                    b.HasIndex("AirportId");

                    b.ToTable("StorageProvinces");

                    b.HasData(
                        new
                        {
                            StorageProvinceId = new Guid("b4822413-a428-4c09-ae55-b2920892ce6e"),
                            Address = "Pending",
                            AirportId = new Guid("9c26a8b1-ddf5-4f74-8088-d1ff471a0526"),
                            Country = "Vietnam",
                            ProvinceName = "Hanoi",
                            Status = false,
                            StorageName = "Hanoi Storage"
                        });
                });

            modelBuilder.Entity("DAL.Entities.Transaction", b =>
                {
                    b.Property<Guid>("TransactionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PaymentMethodTransaction")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TransactionInfo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TransactionNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TransactionId");

                    b.HasIndex("OrderId");

                    b.ToTable("Transactions");

                    b.HasData(
                        new
                        {
                            TransactionId = new Guid("d6f59da0-b09d-4c70-9fe5-ddc4b29fe867"),
                            CreatedDate = new DateTime(2024, 10, 6, 18, 42, 27, 305, DateTimeKind.Local).AddTicks(4980),
                            OrderId = new Guid("bf2fb33a-0500-4ef6-bcc6-abe4b819fa4d"),
                            PaymentMethodTransaction = "Credit Card",
                            Status = "Success",
                            TransactionInfo = "111",
                            TransactionNumber = "!11"
                        });
                });

            modelBuilder.Entity("DAL.Entities.User", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("AvatarLink")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<int?>("OtpCode")
                        .HasColumnType("int");

                    b.Property<DateTime?>("OtpExpiredTime")
                        .HasColumnType("datetime2");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Salt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<Guid?>("StorageProvinceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("UserId");

                    b.HasIndex("RoleId");

                    b.HasIndex("StorageProvinceId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UserId = new Guid("b886a834-419a-4a44-8823-a9c4d96c3b2c"),
                            Address = "123 Main St, City, Country",
                            AvatarLink = "https://example.com/avatar/john_doe.jpg",
                            DateOfBirth = new DateTime(1990, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "johndoe@example.com",
                            FullName = "John Doe",
                            Gender = "Male",
                            PasswordHash = new byte[] { 112, 97, 115, 115, 119, 111, 114, 100, 72, 97, 115, 104, 86, 97, 108, 117, 101 },
                            Phone = "1234567890",
                            RoleId = new Guid("07d78700-442e-4a96-8335-4eb17b7b919b"),
                            Salt = new byte[] { 115, 97, 108, 116, 86, 97, 108, 117, 101 },
                            Status = true,
                            UserName = "john_doe"
                        },
                        new
                        {
                            UserId = new Guid("0a1226c4-4c88-439b-a762-b18b3f816790"),
                            Address = "456 Main St, City, Country",
                            AvatarLink = "https://example.com/avatar/jane_doe.jpg",
                            DateOfBirth = new DateTime(1992, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "janedoe@example.com",
                            FullName = "Jane Doe",
                            Gender = "Female",
                            PasswordHash = new byte[] { 112, 97, 115, 115, 119, 111, 114, 100, 72, 97, 115, 104, 86, 97, 108, 117, 101 },
                            Phone = "0987654321",
                            RoleId = new Guid("9cf7e90a-d8c1-482c-a44e-5df7450f7290"),
                            Salt = new byte[] { 115, 97, 108, 116, 86, 97, 108, 117, 101 },
                            Status = true,
                            UserName = "jane_doe"
                        });
                });

            modelBuilder.Entity("DAL.Entities.Cart", b =>
                {
                    b.HasOne("DAL.Entities.User", "User")
                        .WithMany("Carts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("DAL.Entities.CartItem", b =>
                {
                    b.HasOne("DAL.Entities.Cart", "Cart")
                        .WithMany("CartItems")
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DAL.Entities.Koi", "Koi")
                        .WithMany("CartItems")
                        .HasForeignKey("KoiId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Cart");

                    b.Navigation("Koi");
                });

            modelBuilder.Entity("DAL.Entities.Flight", b =>
                {
                    b.HasOne("DAL.Entities.Airport", "ArrivalAirport")
                        .WithMany("FlightArrivalAirports")
                        .HasForeignKey("ArrivalAirportId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DAL.Entities.Airport", "DepartureAirport")
                        .WithMany("FlightDepartureAirports")
                        .HasForeignKey("DepartureAirportId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("ArrivalAirport");

                    b.Navigation("DepartureAirport");
                });

            modelBuilder.Entity("DAL.Entities.Koi", b =>
                {
                    b.HasOne("DAL.Entities.KoiFarm", "Farm")
                        .WithMany("Kois")
                        .HasForeignKey("FarmId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Entities.Order", "Order")
                        .WithMany("Kois")
                        .HasForeignKey("OrderId");

                    b.Navigation("Farm");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("DAL.Entities.KoiBreed", b =>
                {
                    b.HasOne("DAL.Entities.Breed", "Breed")
                        .WithMany("KoiBreeds")
                        .HasForeignKey("BreedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Entities.Koi", "Koi")
                        .WithMany("KoiBreeds")
                        .HasForeignKey("KoiId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Breed");

                    b.Navigation("Koi");
                });

            modelBuilder.Entity("DAL.Entities.KoiFarm", b =>
                {
                    b.HasOne("DAL.Entities.User", "KoiFarmManager")
                        .WithOne("KoiFarm")
                        .HasForeignKey("DAL.Entities.KoiFarm", "KoiFarmManagerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Entities.StorageProvince", "StorageProvince")
                        .WithMany("KoiFarms")
                        .HasForeignKey("StorageProvinceId");

                    b.Navigation("KoiFarmManager");

                    b.Navigation("StorageProvince");
                });

            modelBuilder.Entity("DAL.Entities.KoiImage", b =>
                {
                    b.HasOne("DAL.Entities.Koi", "Koi")
                        .WithMany("KoiImages")
                        .HasForeignKey("KoiId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Koi");
                });

            modelBuilder.Entity("DAL.Entities.Order", b =>
                {
                    b.HasOne("DAL.Entities.User", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DAL.Entities.Flight", "Flight")
                        .WithMany("Orders")
                        .HasForeignKey("FlightId");

                    b.HasOne("DAL.Entities.Policy", "Policy")
                        .WithMany("Orders")
                        .HasForeignKey("PolicyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Flight");

                    b.Navigation("Policy");
                });

            modelBuilder.Entity("DAL.Entities.OrderStorage", b =>
                {
                    b.HasOne("DAL.Entities.Order", "Order")
                        .WithMany("OrderStorages")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Entities.User", "Shipper")
                        .WithMany("OrderStorages")
                        .HasForeignKey("ShipperId");

                    b.HasOne("DAL.Entities.StorageProvince", "StorageProvince")
                        .WithMany("OrderStorages")
                        .HasForeignKey("StorageProvinceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Shipper");

                    b.Navigation("StorageProvince");
                });

            modelBuilder.Entity("DAL.Entities.Policy", b =>
                {
                    b.HasOne("DAL.Entities.KoiFarm", "Farm")
                        .WithMany("Policies")
                        .HasForeignKey("FarmId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Farm");
                });

            modelBuilder.Entity("DAL.Entities.RefreshToken", b =>
                {
                    b.HasOne("DAL.Entities.User", "User")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("DAL.Entities.RefundRequest", b =>
                {
                    b.HasOne("DAL.Entities.Order", "Order")
                        .WithMany("RefundRequests")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("DAL.Entities.RefundRequestMedium", b =>
                {
                    b.HasOne("DAL.Entities.RefundRequest", "RefundRequest")
                        .WithMany("RefundRequestMedia")
                        .HasForeignKey("RefundRequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RefundRequest");
                });

            modelBuilder.Entity("DAL.Entities.ShippingFee", b =>
                {
                    b.HasOne("DAL.Entities.StorageProvince", "StorageProvinceJp")
                        .WithMany("ShippingFeeStorageProvinceJps")
                        .HasForeignKey("StorageProvinceJpId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DAL.Entities.StorageProvince", "StorageProvinceVn")
                        .WithMany("ShippingFeeStorageProvinceVns")
                        .HasForeignKey("StorageProvinceVnId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("StorageProvinceJp");

                    b.Navigation("StorageProvinceVn");
                });

            modelBuilder.Entity("DAL.Entities.StorageProvince", b =>
                {
                    b.HasOne("DAL.Entities.Airport", "Airport")
                        .WithMany("StorageProvinces")
                        .HasForeignKey("AirportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Airport");
                });

            modelBuilder.Entity("DAL.Entities.Transaction", b =>
                {
                    b.HasOne("DAL.Entities.Order", "Order")
                        .WithMany("Transactions")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("DAL.Entities.User", b =>
                {
                    b.HasOne("DAL.Entities.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Entities.StorageProvince", "StorageProvince")
                        .WithMany("Users")
                        .HasForeignKey("StorageProvinceId");

                    b.Navigation("Role");

                    b.Navigation("StorageProvince");
                });

            modelBuilder.Entity("DAL.Entities.Airport", b =>
                {
                    b.Navigation("FlightArrivalAirports");

                    b.Navigation("FlightDepartureAirports");

                    b.Navigation("StorageProvinces");
                });

            modelBuilder.Entity("DAL.Entities.Breed", b =>
                {
                    b.Navigation("KoiBreeds");
                });

            modelBuilder.Entity("DAL.Entities.Cart", b =>
                {
                    b.Navigation("CartItems");
                });

            modelBuilder.Entity("DAL.Entities.Flight", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("DAL.Entities.Koi", b =>
                {
                    b.Navigation("CartItems");

                    b.Navigation("KoiBreeds");

                    b.Navigation("KoiImages");
                });

            modelBuilder.Entity("DAL.Entities.KoiFarm", b =>
                {
                    b.Navigation("Kois");

                    b.Navigation("Policies");
                });

            modelBuilder.Entity("DAL.Entities.Order", b =>
                {
                    b.Navigation("Kois");

                    b.Navigation("OrderStorages");

                    b.Navigation("RefundRequests");

                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("DAL.Entities.Policy", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("DAL.Entities.RefundRequest", b =>
                {
                    b.Navigation("RefundRequestMedia");
                });

            modelBuilder.Entity("DAL.Entities.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("DAL.Entities.StorageProvince", b =>
                {
                    b.Navigation("KoiFarms");

                    b.Navigation("OrderStorages");

                    b.Navigation("ShippingFeeStorageProvinceJps");

                    b.Navigation("ShippingFeeStorageProvinceVns");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("DAL.Entities.User", b =>
                {
                    b.Navigation("Carts");

                    b.Navigation("KoiFarm");

                    b.Navigation("OrderStorages");

                    b.Navigation("Orders");

                    b.Navigation("RefreshTokens");
                });
#pragma warning restore 612, 618
        }
    }
}
